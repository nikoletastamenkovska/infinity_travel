import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { HeroBanner } from "src/components/banner/HeroBanner";
import { CurrentOffers } from "src/components/currentoffers/CurrentOffers";
import { GroupTravel } from "src/components/grouptravel/GroupTravel";
import { Newsletter } from "src/components/newsletter/Newsletter";
import { SectionTitle } from "src/components/sectiontitle/SectionTitle";
import { Testimonial } from "src/components/testimonial/Testimonial";
import { YourMoments } from "src/components/yourmoments/YourMoments";
import {
  ArrangementType,
  TestimonialType,
  YourMomentsType,
} from "src/types/data_interface";
import { fetchCountries } from "src/utils/dataFetching";

interface HomePageProps {
  allCountries: ArrangementType[];
  allTestimonials: TestimonialType[];
  allMoments: YourMomentsType[];
}

const Home: NextPage<HomePageProps> = ({
  allCountries,
  allTestimonials,
  allMoments,
}) => {
  const allArrangements = allCountries;
  const router = useRouter();
  const [filteredArrangements, setFilteredArrangements] =
    useState(allArrangements);

  useEffect(() => {
    const region = router.query.region as string | undefined;
    const isLastMinute = router.query.isLastMinute === "true";

    let newFilteredArrangements = allArrangements;

    if (region) {
      newFilteredArrangements = newFilteredArrangements.filter(
        (arrangement) => arrangement.Location?.Region === region
      );
    }

    if (isLastMinute) {
      newFilteredArrangements = newFilteredArrangements.filter(
        (arrangement) => arrangement.IsLastMinute === true
      );
    }

    setFilteredArrangements(newFilteredArrangements);
  }, [router.query, allArrangements]);

  return (
    <>
      <Head>
        <title>Infinity travel front-page</title>
        <meta
          name="description"
          content="Generated by NSS for the purpose of providing great travels"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <HeroBanner image={"/images/hero_banner/hero_background.png"} />
        <SectionTitle title={"Актуелни понуди"} />
        <CurrentOffers
          allCountries={allCountries}
          allArrangements={allArrangements}
          filteredArrangements={filteredArrangements}
          seeMorePathname={"/destinations"}
          regionPathname={"/"}
        />
        <GroupTravel />
        <Testimonial data={allTestimonials} />
        <YourMoments images={allMoments} />
        <Newsletter />
      </div>
    </>
  );
};
export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  try {
    const allCountries: ArrangementType[] = await fetchCountries();

    const testimonialsRes = await fetch(
      "https://secretive-canary-variraptor.glitch.me/testimonials"
    );
    if (!testimonialsRes) {
      throw new Error("Failed to fetch required data");
    }
    const allTestimonials: TestimonialType[] = await testimonialsRes.json();

    const momentsRes = await fetch(
      "https://secretive-canary-variraptor.glitch.me/moments"
    );
    if (!momentsRes) {
      throw new Error("Failed to find momments");
    }
    const allMoments: YourMomentsType[] = await momentsRes.json();

    return {
      props: {
        allCountries,
        allTestimonials,
        allMoments,
      },
    };
  } catch (error) {
    console.error("Error fetching data:", error);
  }

  return {
    props: {
      allCountries: [],
      allTestimonials: [],
      allMoments: [],
      error:
        "Oops, a minor electron disruption! Our scientists are investigating. Stay curious!",
    },
  };
};
